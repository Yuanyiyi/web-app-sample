// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.1
// source: auto_test_manager.proto

package web_app_sample

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AutoAgentClient is the client API for AutoAgent service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AutoAgentClient interface {
	StreamService(ctx context.Context, opts ...grpc.CallOption) (AutoAgent_StreamServiceClient, error)
}

type autoAgentClient struct {
	cc grpc.ClientConnInterface
}

func NewAutoAgentClient(cc grpc.ClientConnInterface) AutoAgentClient {
	return &autoAgentClient{cc}
}

func (c *autoAgentClient) StreamService(ctx context.Context, opts ...grpc.CallOption) (AutoAgent_StreamServiceClient, error) {
	stream, err := c.cc.NewStream(ctx, &AutoAgent_ServiceDesc.Streams[0], "/auto.test.manager.AutoAgent/StreamService", opts...)
	if err != nil {
		return nil, err
	}
	x := &autoAgentStreamServiceClient{stream}
	return x, nil
}

type AutoAgent_StreamServiceClient interface {
	Send(*StreamActiveEvent) error
	Recv() (*StreamPassiveEvent, error)
	grpc.ClientStream
}

type autoAgentStreamServiceClient struct {
	grpc.ClientStream
}

func (x *autoAgentStreamServiceClient) Send(m *StreamActiveEvent) error {
	return x.ClientStream.SendMsg(m)
}

func (x *autoAgentStreamServiceClient) Recv() (*StreamPassiveEvent, error) {
	m := new(StreamPassiveEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// AutoAgentServer is the server API for AutoAgent service.
// All implementations must embed UnimplementedAutoAgentServer
// for forward compatibility
type AutoAgentServer interface {
	StreamService(AutoAgent_StreamServiceServer) error
	mustEmbedUnimplementedAutoAgentServer()
}

// UnimplementedAutoAgentServer must be embedded to have forward compatible implementations.
type UnimplementedAutoAgentServer struct {
}

func (UnimplementedAutoAgentServer) StreamService(AutoAgent_StreamServiceServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamService not implemented")
}
func (UnimplementedAutoAgentServer) mustEmbedUnimplementedAutoAgentServer() {}

// UnsafeAutoAgentServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AutoAgentServer will
// result in compilation errors.
type UnsafeAutoAgentServer interface {
	mustEmbedUnimplementedAutoAgentServer()
}

func RegisterAutoAgentServer(s grpc.ServiceRegistrar, srv AutoAgentServer) {
	s.RegisterService(&AutoAgent_ServiceDesc, srv)
}

func _AutoAgent_StreamService_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AutoAgentServer).StreamService(&autoAgentStreamServiceServer{stream})
}

type AutoAgent_StreamServiceServer interface {
	Send(*StreamPassiveEvent) error
	Recv() (*StreamActiveEvent, error)
	grpc.ServerStream
}

type autoAgentStreamServiceServer struct {
	grpc.ServerStream
}

func (x *autoAgentStreamServiceServer) Send(m *StreamPassiveEvent) error {
	return x.ServerStream.SendMsg(m)
}

func (x *autoAgentStreamServiceServer) Recv() (*StreamActiveEvent, error) {
	m := new(StreamActiveEvent)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// AutoAgent_ServiceDesc is the grpc.ServiceDesc for AutoAgent service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AutoAgent_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "auto.test.manager.AutoAgent",
	HandlerType: (*AutoAgentServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamService",
			Handler:       _AutoAgent_StreamService_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "auto_test_manager.proto",
}
